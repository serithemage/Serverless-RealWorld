<context>
# Overview
Serverless-RealWorld는 기존의 NestJS 마이크로서비스 아키텍처 기반 애플리케이션을 AWS Serverless 아키텍처로 마이그레이션하는 프로젝트입니다. 이 마이그레이션을 통해 인프라 관리 부담을 줄이고, 확장성을 높이며, 비용 효율성을 개선하는 것이 목표입니다. AWS CDK를 사용하여 인프라를 코드로 관리하고, 서버리스 서비스들을 활용하여 기존 기능을 구현합니다.

# Core Features
1. **서버리스 인증 서비스**
   - AWS Cognito와 Lambda를 활용한 사용자 인증 및 권한 관리
   - JWT 토큰 기반 인증 유지
   - 기존 인증 서비스의 모든 기능 지원 (회원가입, 로그인, 토큰 발급)

2. **서버리스 API 게이트웨이**
   - AWS API Gateway를 활용한 단일 진입점 구현
   - GraphQL 지원을 위한 AppSync 통합
   - 요청 라우팅, 인증, 로깅 등 공통 기능 처리

3. **서버리스 마이크로서비스**
   - Lambda 함수로 구현된 독립적인 마이크로서비스 (게시글, 프로필 등)
   - 이벤트 기반 아키텍처로 서비스 간 통신 구현 (EventBridge, SNS/SQS)
   - DynamoDB를 활용한 데이터 저장 (기존 카산드라 DB 대체)

4. **인프라 자동화**
   - AWS CDK를 사용한 인프라 정의 및 배포 자동화
   - CI/CD 파이프라인 구축
   - 환경별(개발, 테스트, 프로덕션) 인프라 관리

# User Experience
- **최종 사용자 경험 유지**: 마이그레이션 후에도 기존 Angular 클라이언트 애플리케이션과의 호환성 유지
- **개발자 경험 개선**: 서버리스 아키텍처를 통한 배포 및 운영 간소화
- **성능 최적화**: 서버리스 아키텍처의 자동 확장성을 활용한 응답 시간 개선
</context>

<PRD>
# Technical Architecture
## 시스템 구성 요소
1. **프론트엔드**
   - 기존 Angular 클라이언트 애플리케이션 유지
   - Amazon S3 및 CloudFront를 통한 정적 웹 호스팅

2. **API 레이어**
   - AWS AppSync: GraphQL API 구현
   - AWS API Gateway: REST API 엔드포인트 제공
   - AWS Lambda: API 요청 처리 및 비즈니스 로직 실행

3. **서비스 레이어**
   - AWS Lambda: 각 마이크로서비스 기능 구현
   - AWS EventBridge: 서비스 간 이벤트 기반 통신
   - AWS SNS/SQS: 비동기 메시지 처리

4. **데이터 레이어**
   - Amazon DynamoDB: 주요 데이터 저장소
   - Amazon ElastiCache: 캐싱 (필요시)
   - Amazon S3: 파일 저장 (필요시)

5. **인증 및 권한**
   - Amazon Cognito: 사용자 인증 및 권한 관리
   - AWS IAM: 서비스 간 권한 관리

## 데이터 모델
- 기존 카산드라 DB 스키마를 DynamoDB에 적합한 형태로 변환
- 액세스 패턴 최적화를 위한 GSI(Global Secondary Index) 설계
- 일관된 데이터 접근을 위한 리포지토리 패턴 구현

## API 및 통합
- GraphQL 스키마 정의 및 리졸버 구현 (AppSync)
- 서비스 간 통신을 위한 이벤트 스키마 정의
- 외부 API 통합 (필요시)

## 인프라 요구사항
- AWS 계정 및 적절한 IAM 권한 설정
- AWS CDK 개발 환경 구성
- CI/CD 파이프라인 구축을 위한 GitHub Actions 또는 AWS CodePipeline

# Development Roadmap
## Phase 1: 기반 인프라 구축
- AWS CDK 프로젝트 설정 및 기본 구조 정의
- 핵심 서비스 (VPC, 보안 그룹, IAM 역할) 프로비저닝
- DynamoDB 테이블 설계 및 생성
- Cognito 사용자 풀 설정

## Phase 2: 인증 서비스 마이그레이션
- Cognito 기반 인증 서비스 구현
- Lambda 함수를 통한 사용자 관리 기능 구현
- JWT 토큰 발급 및 검증 로직 구현
- API Gateway와 인증 서비스 통합

## Phase 3: API 게이트웨이 및 GraphQL 구현
- AppSync GraphQL API 설정
- 스키마 정의 및 기본 리졸버 구현
- API Gateway 설정 및 라우팅 구성
- 인증 미들웨어 통합

## Phase 4: 핵심 마이크로서비스 마이그레이션
- 게시글 서비스 Lambda 함수 구현
- 프로필 서비스 Lambda 함수 구현
- EventBridge를 통한 서비스 간 통신 구현
- DynamoDB 리포지토리 패턴 구현

## Phase 5: 통합 및 테스트
- 모든 서비스 간 통합 테스트
- 성능 테스트 및 최적화
- 클라이언트 애플리케이션과의 통합 테스트
- 오류 처리 및 로깅 개선

## Phase 6: 배포 자동화 및 운영 준비
- CI/CD 파이프라인 구축
- 모니터링 및 알림 설정
- 백업 및 복구 전략 구현
- 문서화 및 운영 가이드 작성

# Logical Dependency Chain
1. **기반 인프라**: AWS CDK 설정 → VPC/보안 그룹 → IAM 역할/정책 → DynamoDB 테이블
2. **인증 시스템**: Cognito 사용자 풀 → Lambda 인증 함수 → JWT 처리
3. **API 레이어**: API Gateway → AppSync GraphQL → 기본 리졸버
4. **핵심 서비스**: 인증 서비스 → 프로필 서비스 → 게시글 서비스
5. **서비스 통합**: EventBridge 설정 → 서비스 간 통신 → 통합 테스트
6. **클라이언트 통합**: API 엔드포인트 업데이트 → 클라이언트 테스트 → 최적화
7. **운영 준비**: 모니터링 설정 → CI/CD 파이프라인 → 문서화

# Risks and Mitigations
## 기술적 도전
- **DynamoDB 데이터 모델링**: 카산드라에서 DynamoDB로의 마이그레이션은 데이터 모델 변경이 필요함
  - 완화: 액세스 패턴 분석 후 최적화된 DynamoDB 스키마 설계, 단계적 마이그레이션
- **서비스 간 통신 변경**: Kafka에서 EventBridge/SNS/SQS로의 전환
  - 완화: 이벤트 스키마 정의 및 호환성 레이어 구현, 단위 테스트 강화

## MVP 정의
- **기능 우선순위 설정**: 모든 기능을 한 번에 마이그레이션하기 어려움
  - 완화: 핵심 기능 우선 구현, 점진적 기능 추가 접근법
- **호환성 유지**: 기존 클라이언트와의 호환성 보장
  - 완화: API 계약 테스트, 통합 테스트 자동화

## 리소스 제약
- **AWS 서비스 한계**: 서버리스 아키텍처의 제약사항 (콜드 스타트, 실행 시간 제한 등)
  - 완화: 적절한 메모리 할당, 프로비저닝된 동시성 활용, 성능 모니터링
- **비용 관리**: 서버리스 서비스 사용에 따른 비용 증가 가능성
  - 완화: 비용 모니터링 설정, 리소스 최적화, 자동 스케일링 정책 조정

# Appendix
## 기술 스택
- **프론트엔드**: Angular (기존 유지)
- **백엔드**: AWS Lambda (Typescript), AWS AppSync, API Gateway
- **데이터베이스**: Amazon DynamoDB
- **통신**: AWS EventBridge, SNS/SQS
- **인증**: Amazon Cognito, JWT
- **인프라**: AWS CDK (TypeScript), CloudFormation
- **CI/CD**: GitHub Actions 또는 AWS CodePipeline
- **모니터링**: AWS CloudWatch, X-Ray

## 마이그레이션 전략
- 점진적 마이그레이션 접근법 (Strangler Fig Pattern)
- 기능별 병렬 개발 및 테스트
- 블루/그린 배포 전략
- 데이터 마이그레이션 자동화 스크립트

## 참고 자료
- AWS Serverless 아키텍처 모범 사례
- AWS CDK 문서 및 예제
- DynamoDB 데이터 모델링 가이드
- GraphQL 및 AppSync 통합 가이드
</PRD>
